#pragma kernel CalculateDensity
#include "/Includes/Density.compute"
#include "/Includes/SimplexNoise.compute"

StructuredBuffer<float3> octaveOffsetBuffer;

int numberOfOctaves;

float lacunarity;
float persistence;
float scale;
float weight;
float surfaceOffset;
float weightMultiplier;
float bedrockHeight;
float bedrockWeight;
float3 terracing;

bool solidifyEdges;

[numthreads(numThreads, numThreads, numThreads)]
void CalculateDensity (int3 id : SV_DispatchThreadID) {
    if (id.x >= numVertsPerAxis || id.y >= numVertsPerAxis || id.z >= numVertsPerAxis) {
        return;
    }

    float3 position = id * vertSpacing + center - chunkSize / 2;

    // Generate noise
    float density = 0;
    float frequency = scale / 100;
    float amplitude = 1;
    float octaveWeight = 1;
    for (int i = 0; i < numberOfOctaves; i++) {
        float val = snoise(position * frequency + octaveOffsetBuffer[i] + offset);
        val = 1 - abs(val);
        val *= val;
        val *= octaveWeight;
        density += val * amplitude;

        octaveWeight = max(min(val * weightMultiplier, 1), 0);
        amplitude *= persistence;
        frequency *= lacunarity;
    }

    // Generate surface plane and add noise
    density = -(position.y + surfaceOffset) + density * weight;

    // Generate shelves/terraces
    if (terracing.z > 0) {
        density += (position.y % terracing.x) * terracing.y;
    }

    // Add bedrock layer
    if (position.y < bedrockHeight) {
        density += bedrockWeight;
    }

    // Close mesh edges
    if (solidifyEdges) {
        float3 edgeOffset = abs(position * 2) - mapSize + vertSpacing / 2;
        float edgeWeight = saturate(max(max(edgeOffset.x, edgeOffset.y), edgeOffset.z));
        density = density * (1 - edgeWeight) - 100 * edgeWeight;
    }

    int index = GetVertIndex(id.x, id.y, id.z);
    vertexBuffer[index] = float4(position, density);
}
